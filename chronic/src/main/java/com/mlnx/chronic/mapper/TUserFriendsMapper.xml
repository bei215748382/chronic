<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mlnx.chronic.mapper.TUserFriendsMapper">
	<resultMap id="BaseResultMap" type="com.mlnx.chronic.entity.TUserFriends">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="friend_id" property="friendId" jdbcType="INTEGER" />
		<result column="group_id" property="groupId" jdbcType="INTEGER" />
		<result column="fouce" property="fouce" jdbcType="INTEGER" />
		<result column="open" property="open" jdbcType="INTEGER" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="confirm" property="confirm" jdbcType="INTEGER" />
		<result column="friend_remark" property="friendRemark"
			jdbcType="VARCHAR" />
		<result column="identity" property="identity" jdbcType="INTEGER" />
	</resultMap>
	<resultMap id="FriendsInfoMap" type="com.mlnx.chronic.vo.FriendsInfo">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="friend_id" property="uid" jdbcType="INTEGER" />
		<result column="friend_remark" property="mark" jdbcType="VARCHAR" />
		<result column="pic" property="pic" jdbcType="VARCHAR" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		t_user_friends
		where id = #{id}
	</delete>
	<insert id="insert" parameterType="com.mlnx.chronic.entity.TUserFriends">
		insert into t_user_friends
		(id, user_id, friend_id,
		group_id, fouce,
		open,
		remark,confirm,friend_remark,identity)
		values (#{id},
		#{userId},
		#{friendId},
		#{groupId}, #{fouce},
		#{open},
		#{remark},
		#{confirm},
		#{friendRemark},
		#{identity})
	</insert>
	<update id="updateByPrimaryKey" parameterType="com.mlnx.chronic.entity.TUserFriends">
		update
		t_user_friends
		<set>
			<if test="userId != null and userId !=''">
				user_id = #{userId},
			</if>
			<if test="friendId != null and friendId !=''">
				friend_id = #{friendId},
			</if>
			<if test="groupId != null and groupId !=''">
				group_id = #{groupId},
			</if>
			<if test="fouce != null and fouce !=''">
				fouce = #{fouce},
			</if>
			<if test="open != null and open !=''">
				open = #{open},
			</if>
			<if test="remark != null and remark !=''">
				remark = #{remark},
			</if>
			<if test="confirm != null and confirm !=''">
				confirm = #{confirm},
			</if>
			<if test="friendRemark != null and friendRemark !=''">
				friend_remark = #{friendRemark},
			</if>
			<if test="identity != null and identity != ''">
				identity = #{identity}
			</if>
		</set>
		where id = #{id}
	</update>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select *
		from t_user_friends
		where id =
		#{id}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select *
		from t_user_friends
	</select>
	<select id="selectByUserFriends" parameterType="com.mlnx.chronic.entity.TUserFriends"
		resultMap="BaseResultMap">
		select *
		from t_user_friends where user_id = #{userId} and
		friend_id =
		#{friendId}
	</select>
	<select id="selectByIdAndGroupId" parameterType="com.mlnx.chronic.entity.TUserFriends"
		resultMap="BaseResultMap">
		select *
		from t_user_friends where user_id = #{userId} and
		group_id =
		#{groupId} and confirm = 1
	</select>
	<select id="selectByUserIdAndUNConfirmed" parameterType="com.mlnx.chronic.entity.TUserFriends"
		resultMap="BaseResultMap">
		select *
		from t_user_friends where friend_id = #{friendId}
		and
		confirm =
		#{confirm}
	</select>
	<select id="findByUserIdAndFriendId" parameterType="com.mlnx.chronic.entity.TUserFriends"
		resultMap="BaseResultMap">
		select *
		from t_user_friends where friend_id = #{friendId}
		and
		user_id =
		#{userId}
	</select>
	<update id="updateFriendRemark" parameterType="com.mlnx.chronic.entity.TUserFriends">
		update
		t_user_friends
		set friend_remark = #{friendRemark}
		where id = #{id}
	</update>
	<select id="selectIdsByIdAndGroupId" parameterType="com.mlnx.chronic.entity.TUserFriends"
		resultMap="FriendsInfoMap">
		select
		friends.id,friends.friend_id,friends.friend_remark,ext.pic
		from
		t_user_friends friends left join t_user_ext ext on friend_id =
		ext.user_id where friends.user_id = #{userId} and
		friends.group_id =
		#{groupId} and friends.confirm = 1
	</select>
</mapper>